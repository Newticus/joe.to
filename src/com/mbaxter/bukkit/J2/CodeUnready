public boolean onConsoleCommand(String[] split){
		if(split[0].equalsIgnoreCase("kick")){
			if(split.length < 3){
				j2.log.log(Level.INFO, "Usage: kick playername reason");
				return true;
			}
			j2.callKick(split[1],"console",etc.combineSplit(2, split, " "));
			return true;
		}
		if(split[0].equalsIgnoreCase("ban")){
			if(split.length < 4){
				j2.log.log(Level.INFO, "Usage:  ban playername time-in-minutes reason");
				j2.log.log(Level.INFO, "        do time as 0 for permaban");
				j2.log.log(Level.INFO, "        reason can have spaces in it");
				return true;
			}
			j2.callBan("console",split);
			return true;
		}
		if(split[0].equalsIgnoreCase("addban")){
			if(split.length < 4){
				j2.log.log(Level.INFO, "Usage:  addban playername time-in-minutes reason");
				j2.log.log(Level.INFO, "        do time as 0 for permaban");
				j2.log.log(Level.INFO, "        reason can have spaces in it");
				return true;
			}
			j2.callAddBan("console",split);
			return true;
		}
		if(split[0].equalsIgnoreCase("unban") || split[0].equalsIgnoreCase("pardon")){
			if(split.length < 2){
				j2.log.log(Level.INFO, "Usage: unban playername");
				return true;
			}
			String name=split[1];
			String adminName="console";
			j2.unban(name);
			j2.log.log(Level.INFO, "Unbanning " + name + " by " + adminName);
            j2.msgByCmd("/admin",Colors.Rose + "Unbanning " + name + " by " + adminName);
            return true;
		}
		/*if(split[0].equalsIgnoreCase("trust")){
			if(split.length < 2){
				j2.log.log(Level.INFO, "Usage: trust playername");
				return true;
			}
			String playername=split[1];
			String adminName="console";
			j2.trust(playername);
			j2.log.log(Level.INFO, "Trusting " + playername + " by " + adminName);
            j2.msgByCmd("/admin",Colors.Rose + "Trusting " + playername + " by " + adminName);
			return true;
		}*/
		
		if(split[0].equalsIgnoreCase("getgroup")){
			if(split.length==1){
				j2.log.log(Level.INFO, "getgroup playername");
			}
			else {
				Player who=etc.getServer().matchPlayer(split[1]);
				if(who==null){
					j2.log.log(Level.INFO,"Player not found");
					return true;
				}
				String message="Player "+who.getName()+":";
				for(String group : who.getGroups()){
				if(group!=null)message+=" "+group;
				}
				j2.log.log(Level.INFO, message);
			}
			return true;
		}
		if(split[0].equalsIgnoreCase("g")){
			String text = "";
			text+=etc.combineSplit(1, split, " ");
			j2.gMsg("CONSOLE", text);
			return true;	
		}
		if(split[0].equalsIgnoreCase("say") && split.length>1){
			j2.ircMsg("[SERVER] "+etc.combineSplit(1,split," "));
			return false;
		}
		if(split[0].equalsIgnoreCase("a")){
			String name="CONSOLE";
			String message=etc.combineSplit(1, split, " ");
			j2.aMsg(name,message);
			return true;	
		}
		if (split[0].equalsIgnoreCase("reloadtips")) {
	         j2.loadTips();
	         j2.log.info("Tips reloaded.");
	         return true;
	      }
		if(split[0].equalsIgnoreCase("ircreload")){
			j2.loadIRCAdmins();
    		j2.log.info("IRC admins reloaded");
    		return true;
		}
		if(split[0].equalsIgnoreCase("j2reload")){
			j2.loadData();
			j2.log.info("j2 data reloaded");
			return true;
		}
		if(split[0].equalsIgnoreCase("irc") && split.length>2){
			j2.doIRC(split[1],etc.combineSplit(2, split, " "));
			return true;
		}
		if(split[0].equalsIgnoreCase("kickall")){
			if(split.length>1){
				j2.kickAll(etc.combineSplit(1, split, " "));
			}
			else{
				j2.kickAll("");
			}
			return true;
		}
		return false;
	}
	
public void onPlayerMove(Player player, Location from, Location to) {
    	//j2.travelLog(player.getName(),1);
    	if(j2.mc2){
    		j2.locationCheck(player,null,false);
    	}
    }
    
    public boolean onIgnite(Block block, Player player) {
    	//onIgnite block status 2 is "lit by player"
        if(!j2.fun || (block.getStatus() == 2 && player != null && player.canIgnoreRestrictions()))
            return false;
        else
            return true;
    }
    public boolean onExplode(Block block) {
        if(j2.fun)
        	return true;
        else
        	return false;
    }